apiVersion: apps/v1
kind: Deployment
metadata:
  name: dgdm-app
  namespace: dgdm-histopath
  labels:
    app.kubernetes.io/name: dgdm-histopath
    app.kubernetes.io/component: app
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: dgdm-histopath
      app.kubernetes.io/component: app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dgdm-histopath
        app.kubernetes.io/component: app
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: dgdm-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: dgdm-app
        image: dgdm-histopath:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        envFrom:
        - configMapRef:
            name: dgdm-config
        - secretRef:
            name: dgdm-secrets
        env:
        - name: DGDM_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DGDM_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DGDM_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
            nvidia.com/gpu: "1"
          limits:
            cpu: "4"
            memory: "8Gi"
            nvidia.com/gpu: "1"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
          readOnly: true
        - name: output-volume
          mountPath: /app/outputs
        - name: cache-volume
          mountPath: /app/cache
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: model-volume
          mountPath: /app/models
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: dgdm-data-pvc
      - name: output-volume
        persistentVolumeClaim:
          claimName: dgdm-output-pvc
      - name: cache-volume
        persistentVolumeClaim:
          claimName: dgdm-cache-pvc
      - name: config-volume
        configMap:
          name: dgdm-config
      - name: model-volume
        persistentVolumeClaim:
          claimName: dgdm-model-pvc
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - dgdm-histopath
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - app
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dgdm-worker
  namespace: dgdm-histopath
  labels:
    app.kubernetes.io/name: dgdm-histopath
    app.kubernetes.io/component: worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: dgdm-histopath
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dgdm-histopath
        app.kubernetes.io/component: worker
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: dgdm-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: dgdm-worker
        image: dgdm-histopath:latest
        imagePullPolicy: Always
        command: ["python", "-m", "dgdm_histopath.workers.training_worker"]
        envFrom:
        - configMapRef:
            name: dgdm-config
        - secretRef:
            name: dgdm-secrets
        env:
        - name: DGDM_WORKER_MODE
          value: "true"
        resources:
          requests:
            cpu: "4"
            memory: "8Gi"
            nvidia.com/gpu: "1"
          limits:
            cpu: "8"
            memory: "16Gi"
            nvidia.com/gpu: "1"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
          readOnly: true
        - name: output-volume
          mountPath: /app/outputs
        - name: cache-volume
          mountPath: /app/cache
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: model-volume
          mountPath: /app/models
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: dgdm-data-pvc
      - name: output-volume
        persistentVolumeClaim:
          claimName: dgdm-output-pvc
      - name: cache-volume
        persistentVolumeClaim:
          claimName: dgdm-cache-pvc
      - name: config-volume
        configMap:
          name: dgdm-config
      - name: model-volume
        persistentVolumeClaim:
          claimName: dgdm-model-pvc
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: dgdm-histopath
  labels:
    app.kubernetes.io/name: dgdm-histopath
    app.kubernetes.io/component: proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: dgdm-histopath
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dgdm-histopath
        app.kubernetes.io/component: proxy
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config