#!/usr/bin/env python3
"""
DGDM Histopath Lab - Production Health Check
Generated by Terry for Terragon Labs SDLC v4.0

Comprehensive health check for container orchestration.
"""

import sys
import time
import json
import os
from typing import Dict, Any, List
import urllib.request
import urllib.error
import socket


class HealthChecker:
    """Production health check implementation."""
    
    def __init__(self):
        self.checks = []
        self.timeout = 10
        self.health_port = int(os.getenv('HEALTH_PORT', '8080'))
        self.api_port = int(os.getenv('API_PORT', '8000'))
        
    def add_check(self, name: str, check_func, critical: bool = True):
        """Add a health check."""
        self.checks.append({
            'name': name,
            'func': check_func,
            'critical': critical
        })
    
    def check_http_endpoint(self, port: int, path: str = '/health') -> bool:
        """Check HTTP endpoint availability."""
        try:
            url = f"http://localhost:{port}{path}"
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'HealthCheck/1.0')
            
            with urllib.request.urlopen(req, timeout=self.timeout) as response:
                return response.getcode() == 200
                
        except Exception:
            return False
    
    def check_port_listening(self, port: int) -> bool:
        """Check if port is listening."""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            result = sock.connect_ex(('localhost', port))
            sock.close()
            return result == 0
        except Exception:
            return False
    
    def check_file_exists(self, filepath: str) -> bool:
        """Check if critical file exists."""
        return os.path.exists(filepath) and os.access(filepath, os.R_OK)
    
    def check_disk_space(self, path: str = '/', threshold: float = 0.95) -> bool:
        """Check disk space usage."""
        try:
            import shutil
            total, used, free = shutil.disk_usage(path)
            usage_ratio = used / total
            return usage_ratio < threshold
        except Exception:
            return True  # Non-critical if check fails
    
    def check_memory_usage(self, threshold: float = 0.95) -> bool:
        """Check memory usage."""
        try:
            import psutil
            memory = psutil.virtual_memory()
            return memory.percent / 100 < threshold
        except ImportError:
            # Check /proc/meminfo as fallback
            try:
                with open('/proc/meminfo', 'r') as f:
                    lines = f.readlines()
                
                mem_total = None
                mem_available = None
                
                for line in lines:
                    if line.startswith('MemTotal:'):
                        mem_total = int(line.split()[1])
                    elif line.startswith('MemAvailable:'):
                        mem_available = int(line.split()[1])
                
                if mem_total and mem_available:
                    usage_ratio = (mem_total - mem_available) / mem_total
                    return usage_ratio < threshold
                    
                return True  # Default to healthy if can't determine
                
            except Exception:
                return True
        except Exception:
            return True
    
    def check_process_running(self, process_name: str) -> bool:
        """Check if process is running."""
        try:
            import psutil
            for proc in psutil.process_iter(['name']):
                if process_name in proc.info['name']:
                    return True
            return False
        except ImportError:
            # Use ps command as fallback
            import subprocess
            try:
                result = subprocess.run(
                    ['pgrep', '-f', process_name],
                    capture_output=True,
                    timeout=5
                )
                return result.returncode == 0
            except Exception:
                return True  # Default to healthy if can't check
        except Exception:
            return True
    
    def check_database_connection(self) -> bool:
        """Check database connectivity."""
        db_host = os.getenv('DB_HOST')
        if not db_host:
            return True  # No database configured
        
        try:
            import psycopg2
            conn = psycopg2.connect(
                host=db_host,
                port=os.getenv('DB_PORT', 5432),
                database=os.getenv('DB_NAME'),
                user=os.getenv('DB_USER'),
                password=os.getenv('DB_PASSWORD'),
                connect_timeout=5
            )
            conn.close()
            return True
        except ImportError:
            return True  # psycopg2 not available
        except Exception:
            return False
    
    def check_redis_connection(self) -> bool:
        """Check Redis connectivity."""
        redis_host = os.getenv('REDIS_HOST')
        if not redis_host:
            return True  # No Redis configured
        
        try:
            import redis
            r = redis.Redis(
                host=redis_host,
                port=int(os.getenv('REDIS_PORT', 6379)),
                password=os.getenv('REDIS_PASSWORD'),
                db=int(os.getenv('REDIS_DB', 0)),
                socket_timeout=5
            )
            r.ping()
            return True
        except ImportError:
            return True  # redis not available
        except Exception:
            return False
    
    def run_all_checks(self) -> Dict[str, Any]:
        """Run all health checks and return results."""
        results = {
            'status': 'healthy',
            'timestamp': time.time(),
            'checks': [],
            'summary': {
                'total': 0,
                'passed': 0,
                'failed': 0,
                'critical_failed': 0
            }
        }
        
        for check in self.checks:
            check_start = time.time()
            
            try:
                passed = check['func']()
                duration = time.time() - check_start
                
                check_result = {
                    'name': check['name'],
                    'status': 'pass' if passed else 'fail',
                    'critical': check['critical'],
                    'duration': duration,
                    'message': 'OK' if passed else 'Check failed'
                }
                
                results['checks'].append(check_result)
                results['summary']['total'] += 1
                
                if passed:
                    results['summary']['passed'] += 1
                else:
                    results['summary']['failed'] += 1
                    if check['critical']:
                        results['summary']['critical_failed'] += 1
                        
            except Exception as e:
                duration = time.time() - check_start
                
                check_result = {
                    'name': check['name'],
                    'status': 'error',
                    'critical': check['critical'],
                    'duration': duration,
                    'message': f'Check error: {e}'
                }
                
                results['checks'].append(check_result)
                results['summary']['total'] += 1
                results['summary']['failed'] += 1
                
                if check['critical']:
                    results['summary']['critical_failed'] += 1
        
        # Determine overall status
        if results['summary']['critical_failed'] > 0:
            results['status'] = 'unhealthy'
        elif results['summary']['failed'] > 0:
            results['status'] = 'degraded'
        else:
            results['status'] = 'healthy'
        
        return results
    
    def setup_default_checks(self):
        """Setup default health checks for the application."""
        
        # Critical checks
        self.add_check('health_endpoint', 
                      lambda: self.check_http_endpoint(self.health_port), 
                      critical=True)
        
        self.add_check('application_port', 
                      lambda: self.check_port_listening(self.api_port), 
                      critical=True)
        
        self.add_check('disk_space', 
                      lambda: self.check_disk_space('/', 0.95), 
                      critical=True)
        
        self.add_check('memory_usage', 
                      lambda: self.check_memory_usage(0.95), 
                      critical=True)
        
        # Non-critical checks
        self.add_check('log_directory', 
                      lambda: self.check_file_exists('/app/logs'), 
                      critical=False)
        
        self.add_check('config_files', 
                      lambda: self.check_file_exists('/app/dgdm_histopath'), 
                      critical=False)
        
        # External service checks
        self.add_check('database_connection', 
                      self.check_database_connection, 
                      critical=False)
        
        self.add_check('redis_connection', 
                      self.check_redis_connection, 
                      critical=False)


def main():
    """Main health check entry point."""
    checker = HealthChecker()
    checker.setup_default_checks()
    
    # Run health checks
    results = checker.run_all_checks()
    
    # Output results
    if os.getenv('HEALTH_CHECK_JSON', '').lower() == 'true':
        print(json.dumps(results, indent=2))
    else:
        print(f"Health Status: {results['status'].upper()}")
        print(f"Checks: {results['summary']['passed']}/{results['summary']['total']} passed")
        
        if results['status'] != 'healthy':
            print("\nFailed Checks:")
            for check in results['checks']:
                if check['status'] != 'pass':
                    critical_marker = " [CRITICAL]" if check['critical'] else ""
                    print(f"  - {check['name']}: {check['message']}{critical_marker}")
    
    # Exit with appropriate code
    if results['status'] == 'unhealthy':
        sys.exit(1)  # Critical failure
    elif results['status'] == 'degraded':
        sys.exit(0 if os.getenv('ALLOW_DEGRADED', '').lower() == 'true' else 1)
    else:
        sys.exit(0)  # Healthy


if __name__ == '__main__':
    main()