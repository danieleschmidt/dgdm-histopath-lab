#!/bin/bash
# DGDM Histopath Lab - Production Entrypoint
# Generated by Terry for Terragon Labs SDLC v4.0

set -e

# Default configuration
export PYTHONPATH="${PYTHONPATH:-/app}"
export ENVIRONMENT="${ENVIRONMENT:-production}"
export LOG_LEVEL="${LOG_LEVEL:-INFO}"

# Initialize logging
mkdir -p /app/logs
echo "$(date): Starting DGDM Histopath Lab in $ENVIRONMENT mode" >> /app/logs/startup.log

# Database migration check
if [ "$ENVIRONMENT" = "production" ] && [ -n "$DB_HOST" ]; then
    echo "$(date): Checking database connectivity..." >> /app/logs/startup.log
    
    # Wait for database to be available
    timeout=30
    while [ $timeout -gt 0 ]; do
        if python -c "
import os
import sys
try:
    import psycopg2
    conn = psycopg2.connect(
        host=os.getenv('DB_HOST'),
        port=os.getenv('DB_PORT', 5432),
        database=os.getenv('DB_NAME'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD')
    )
    conn.close()
    print('Database connection successful')
    sys.exit(0)
except Exception as e:
    print(f'Database connection failed: {e}')
    sys.exit(1)
"; then
            echo "$(date): Database connection successful" >> /app/logs/startup.log
            break
        fi
        
        echo "$(date): Waiting for database... ($timeout seconds remaining)" >> /app/logs/startup.log
        sleep 1
        timeout=$((timeout - 1))
    done
    
    if [ $timeout -eq 0 ]; then
        echo "$(date): ERROR: Database connection timeout" >> /app/logs/startup.log
        exit 1
    fi
fi

# Redis connectivity check
if [ -n "$REDIS_HOST" ]; then
    echo "$(date): Checking Redis connectivity..." >> /app/logs/startup.log
    
    timeout=15
    while [ $timeout -gt 0 ]; do
        if python -c "
import os
import sys
try:
    import redis
    r = redis.Redis(
        host=os.getenv('REDIS_HOST'),
        port=int(os.getenv('REDIS_PORT', 6379)),
        password=os.getenv('REDIS_PASSWORD'),
        db=int(os.getenv('REDIS_DB', 0))
    )
    r.ping()
    print('Redis connection successful')
    sys.exit(0)
except Exception as e:
    print(f'Redis connection failed: {e}')
    sys.exit(1)
"; then
            echo "$(date): Redis connection successful" >> /app/logs/startup.log
            break
        fi
        
        echo "$(date): Waiting for Redis... ($timeout seconds remaining)" >> /app/logs/startup.log
        sleep 1
        timeout=$((timeout - 1))
    done
    
    if [ $timeout -eq 0 ]; then
        echo "$(date): WARNING: Redis connection timeout (non-fatal)" >> /app/logs/startup.log
    fi
fi

# System optimization
echo "$(date): Applying system optimizations..." >> /app/logs/startup.log

# Set optimal Python settings for production
export PYTHONHASHSEED=random
export PYTHONOPTIMIZE=1

# Apply performance optimizations
if [ "$ENVIRONMENT" = "production" ]; then
    # Set memory allocation strategy
    export MALLOC_ARENA_MAX=2
    export MALLOC_MMAP_THRESHOLD_=131072
    export MALLOC_TRIM_THRESHOLD_=131072
    export MALLOC_TOP_PAD_=131072
    export MALLOC_MMAP_MAX_=65536
    
    # PyTorch optimizations
    export OMP_NUM_THREADS="${OMP_NUM_THREADS:-$(nproc)}"
    export MKL_NUM_THREADS="${MKL_NUM_THREADS:-$(nproc)}"
    export NUMEXPR_NUM_THREADS="${NUMEXPR_NUM_THREADS:-$(nproc)}"
    
    # CUDA optimizations if available
    if command -v nvidia-smi >/dev/null 2>&1; then
        export CUDA_LAUNCH_BLOCKING=0
        export CUDA_CACHE_DISABLE=0
        echo "$(date): CUDA detected, GPU optimizations enabled" >> /app/logs/startup.log
    fi
fi

# Initialize health monitoring
python -c "
from dgdm_histopath.utils.resilience import default_health_monitor
from dgdm_histopath.utils.monitoring import setup_monitoring

# Register basic health checks
def check_memory():
    import psutil
    return psutil.virtual_memory().percent < 90

def check_disk():
    import psutil
    return psutil.disk_usage('/').percent < 95

try:
    default_health_monitor.register_health_check('memory', check_memory)
    default_health_monitor.register_health_check('disk', check_disk)
    print('Health monitoring initialized')
except ImportError:
    print('Health monitoring skipped (missing dependencies)')
" 2>/dev/null || echo "$(date): Health monitoring initialization skipped" >> /app/logs/startup.log

# Start the appropriate service based on command
case "${1:-api}" in
    "api")
        echo "$(date): Starting API server..." >> /app/logs/startup.log
        exec gunicorn \
            --bind 0.0.0.0:8000 \
            --workers "${GUNICORN_WORKERS:-4}" \
            --worker-class gevent \
            --worker-connections "${GUNICORN_CONNECTIONS:-1000}" \
            --max-requests "${GUNICORN_MAX_REQUESTS:-1000}" \
            --max-requests-jitter "${GUNICORN_MAX_REQUESTS_JITTER:-50}" \
            --timeout 300 \
            --keep-alive 5 \
            --log-level info \
            --access-logfile /app/logs/access.log \
            --error-logfile /app/logs/error.log \
            --capture-output \
            --enable-stdio-inheritance \
            "dgdm_histopath.api.app:create_app()"
        ;;
        
    "worker")
        echo "$(date): Starting quantum worker..." >> /app/logs/startup.log
        exec python -m celery worker \
            --app=dgdm_histopath.quantum.celery_app \
            --loglevel=info \
            --concurrency="${WORKER_CONCURRENCY:-4}" \
            --prefetch-multiplier="${WORKER_PREFETCH:-1}" \
            --max-tasks-per-child="${WORKER_MAX_TASKS:-1000}" \
            --logfile=/app/logs/worker.log
        ;;
        
    "scheduler")
        echo "$(date): Starting quantum scheduler..." >> /app/logs/startup.log
        exec python -m dgdm_histopath.quantum.scheduler \
            --max-jobs="${MAX_JOBS:-100}" \
            --log-file=/app/logs/scheduler.log
        ;;
        
    "flower")
        echo "$(date): Starting Celery Flower monitoring..." >> /app/logs/startup.log
        exec celery flower \
            --app=dgdm_histopath.quantum.celery_app \
            --address=0.0.0.0 \
            --port=5555 \
            --basic_auth="${FLOWER_AUTH:-admin:admin}" \
            --logging=info
        ;;
        
    "migrate")
        echo "$(date): Running database migrations..." >> /app/logs/startup.log
        exec python -m dgdm_histopath.database.migrate
        ;;
        
    "shell")
        echo "$(date): Starting interactive shell..." >> /app/logs/startup.log
        exec python -i -c "
import os
import sys
sys.path.insert(0, '/app')
print('DGDM Histopath Lab Interactive Shell')
print('Environment:', os.getenv('ENVIRONMENT', 'unknown'))
try:
    from dgdm_histopath import *
    print('DGDM modules imported successfully')
except ImportError as e:
    print(f'Import warning: {e}')
"
        ;;
        
    "test")
        echo "$(date): Running tests..." >> /app/logs/startup.log
        exec python -m pytest tests/ -v --tb=short
        ;;
        
    *)
        echo "$(date): Unknown command: $1" >> /app/logs/startup.log
        echo "Available commands: api, worker, scheduler, flower, migrate, shell, test"
        exit 1
        ;;
esac