name: DGDM Histopath Lab CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  PYTORCH_VERSION: '2.0.0'
  CUDA_VERSION: '11.8'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
        # Install development dependencies
        pip install \
          pytest>=7.0.0 \
          pytest-cov>=4.0.0 \
          pytest-xdist>=3.0.0 \
          black>=22.0.0 \
          flake8>=5.0.0 \
          mypy>=1.0.0 \
          bandit>=1.7.0 \
          safety>=2.0.0 \
          radon>=5.1.0 \
          pylint>=2.15.0
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff dgdm_histopath/ tests/
    
    - name: Linting (Flake8)
      run: |
        flake8 dgdm_histopath/ tests/ \
          --max-line-length=88 \
          --extend-ignore=E203,W503,E501 \
          --max-complexity=10 \
          --statistics
    
    - name: Type checking (MyPy)
      run: |
        mypy dgdm_histopath/ \
          --ignore-missing-imports \
          --disallow-untyped-defs \
          --warn-unused-ignores \
          --warn-redundant-casts
    
    - name: Security scan (Bandit)
      run: |
        bandit -r dgdm_histopath/ \
          -f json \
          -o bandit-report.json \
          -ll || true  # Don't fail on security issues, just report
        
        # Upload results
        if [ -f bandit-report.json ]; then
          echo "Security scan completed. Report generated."
          cat bandit-report.json
        fi
    
    - name: Dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        
        if [ -f safety-report.json ]; then
          echo "Dependency scan completed."
          cat safety-report.json
        fi
    
    - name: Code complexity analysis
      run: |
        radon cc dgdm_histopath/ --json --output-file complexity-report.json
        radon mi dgdm_histopath/ --json --output-file maintainability-report.json
        
        echo "Code complexity analysis completed."
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          bandit-report.json
          safety-report.json
          complexity-report.json
          maintainability-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        pytorch-version: ['2.0.0', '2.1.0']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1
    
    - name: Install PyTorch ${{ matrix.pytorch-version }}
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ matrix.pytorch-version }} torchvision --index-url https://download.pytorch.org/whl/cpu
    
    - name: Install package and dependencies
      run: |
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-cov pytest-xdist pytest-timeout
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/ \
          --cov=dgdm_histopath \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-branch \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          --timeout=300 \
          -v \
          -x  # Stop on first failure
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.pytorch-version }}
        path: |
          test-results.xml
          coverage.xml
          htmlcov/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9' && matrix.pytorch-version == '2.0.0'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libhdf5-dev
    
    - name: Install package and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-timeout
    
    - name: Generate test data
      run: |
        python -c "
        import torch
        import numpy as np
        from pathlib import Path
        
        # Create test data directory
        test_data_dir = Path('test_data')
        test_data_dir.mkdir(exist_ok=True)
        
        # Generate synthetic slide data
        for i in range(5):
            data = torch.randn(100, 768)  # 100 patches, 768 features
            torch.save(data, test_data_dir / f'slide_{i}.pt')
        
        print('Test data generated successfully')
        "
    
    - name: Run integration tests
      run: |
        pytest tests/ \
          -k "integration" \
          --timeout=600 \
          -v \
          --tb=short
    
    - name: Test CLI commands
      run: |
        # Test CLI imports and help
        python -m dgdm_histopath.cli.train --help
        python -m dgdm_histopath.cli.predict --help
        python -m dgdm_histopath.cli.preprocess --help
        
        # Test basic model creation
        python -c "
        from dgdm_histopath.models.dgdm_model import DGDMModel
        model = DGDMModel(node_features=768, hidden_dims=[512, 256], num_classes=5)
        print('Model created successfully')
        print(f'Model parameters: {sum(p.numel() for p in model.parameters())}')
        "
    
    - name: Cleanup
      run: |
        rm -rf test_data/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-benchmark psutil memory-profiler
    
    - name: Run performance benchmarks
      run: |
        python -c "
        from dgdm_histopath.testing.test_suite import run_performance_suite
        import json
        
        results = run_performance_suite()
        
        # Save results
        with open('performance-results.json', 'w') as f:
            json.dump(results, f, indent=2)
        
        # Check thresholds
        assert results.get('model_creation_time', 0) < 10.0, 'Model creation too slow'
        assert results.get('avg_inference_time', 0) < 5.0, 'Inference too slow'
        assert results.get('model_memory_usage_mb', 0) < 2000, 'Memory usage too high'
        
        print('Performance benchmarks passed!')
        "
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [code-quality, unit-tests, integration-tests, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
        # Install all quality gate tools
        pip install \
          pytest pytest-cov \
          black flake8 mypy \
          bandit safety radon pylint
    
    - name: Run comprehensive quality gates
      run: |
        python -m dgdm_histopath.testing.quality_gates \
          --output-dir quality_reports \
          --parallel
    
    - name: Upload quality gate reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-gate-reports
        path: quality_reports/
    
    - name: Comment PR with quality results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'quality_reports/quality_summary.txt';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Quality Gate Results\n\n\`\`\`\n${summary}\n\`\`\``
            });
          }

  gpu-tests:
    name: GPU Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[gpu-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install CUDA dependencies
      run: |
        # This would require GPU runners - placeholder for now
        echo "GPU tests would run here with appropriate runners"
        
        # Install CPU versions for now
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install -e .
    
    - name: Test CUDA availability detection
      run: |
        python -c "
        import torch
        print(f'CUDA available: {torch.cuda.is_available()}')
        print(f'CUDA device count: {torch.cuda.device_count()}')
        
        # Test GPU utility functions
        from dgdm_histopath.utils.validation import validate_gpu_availability
        gpu_info = validate_gpu_availability()
        print(f'GPU validation result: {gpu_info}')
        "

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality-gates]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality-gates]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install sphinx sphinx-rtd-theme nbsphinx
    
    - name: Build documentation
      run: |
        cd docs && make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-gates, build-package]
    
    steps:
    - name: Notify on success
      if: ${{ needs.quality-gates.result == 'success' && needs.build-package.result == 'success' }}
      run: |
        echo "✅ All quality gates passed! Build successful."
    
    - name: Notify on failure
      if: ${{ needs.quality-gates.result == 'failure' || needs.build-package.result == 'failure' }}
      run: |
        echo "❌ Quality gates or build failed!"
        exit 1