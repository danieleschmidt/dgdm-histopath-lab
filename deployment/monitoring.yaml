# DGDM Histopath Lab - Production Monitoring Configuration
# Generated by Terry for Terragon Labs SDLC v4.0
# Prometheus, Grafana, and alerting setup

apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'dgdm-histopath-prod'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # DGDM Application metrics
      - job_name: 'dgdm-api'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - dgdm-histopath
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: dgdm-histopath-api-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics

      # Worker metrics
      - job_name: 'dgdm-workers'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - dgdm-histopath
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_tier]
            action: keep
            regex: worker
          - source_labels: [__address__]
            target_label: __address__
            regex: '(.+):.*'
            replacement: '${1}:9090'

      # Kubernetes cluster metrics
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Node exporter
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

    alerting:
      alertmanagers:
        - kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace]
              action: keep
              regex: monitoring
            - source_labels: [__meta_kubernetes_pod_label_app]
              action: keep
              regex: alertmanager

  alert_rules.yml: |
    groups:
      - name: dgdm.rules
        rules:
          # Application availability
          - alert: DGDMAPIDown
            expr: up{job="dgdm-api"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "DGDM API is down"
              description: "DGDM API has been down for more than 1 minute"

          # High response time
          - alert: DGDMHighLatency
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="dgdm-api"}[5m])) > 2
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "DGDM API high latency"
              description: "95th percentile latency is {{ $value }}s"

          # High error rate
          - alert: DGDMHighErrorRate
            expr: rate(http_requests_total{job="dgdm-api",status=~"5.."}[5m]) / rate(http_requests_total{job="dgdm-api"}[5m]) > 0.05
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "DGDM API high error rate"
              description: "Error rate is {{ $value | humanizePercentage }}"

          # Memory usage
          - alert: DGDMHighMemoryUsage
            expr: (process_resident_memory_bytes{job="dgdm-api"} / 1024 / 1024) > 2048
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "DGDM API high memory usage"
              description: "Memory usage is {{ $value }}MB"

          # CPU usage
          - alert: DGDMHighCPUUsage
            expr: rate(process_cpu_seconds_total{job="dgdm-api"}[5m]) * 100 > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "DGDM API high CPU usage"
              description: "CPU usage is {{ $value }}%"

          # Queue depth
          - alert: DGDMHighQueueDepth
            expr: dgdm_quantum_queue_depth > 100
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "DGDM quantum queue depth high"
              description: "Queue depth is {{ $value }}"

          # Worker availability
          - alert: DGDMWorkersDown
            expr: up{job="dgdm-workers"} == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "DGDM workers are down"
              description: "No DGDM workers are available"

          # GPU utilization
          - alert: DGDMGPUUtilization
            expr: dgdm_gpu_utilization < 0.1
            for: 10m
            labels:
              severity: info
            annotations:
              summary: "DGDM GPU underutilized"
              description: "GPU utilization is {{ $value | humanizePercentage }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=10GB'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false

    [auth.anonymous]
    enabled = true
    org_name = DGDM Histopath Lab
    org_role = Viewer

    [security]
    admin_user = admin
    admin_password = ${GRAFANA_ADMIN_PASSWORD}

    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/dgdm-overview.json

  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true

  dgdm-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "DGDM Histopath Lab - Production Overview",
        "tags": ["dgdm", "production"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "API Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"dgdm-api\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"dgdm-api\"}[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "yAxes": [
              {
                "unit": "s"
              }
            ],
            "gridPos": {
              "h": 9,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"dgdm-api\"}[5m])",
                "legendFormat": "Requests/sec"
              }
            ],
            "yAxes": [
              {
                "unit": "reqps"
              }
            ],
            "gridPos": {
              "h": 9,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"dgdm-api\",status=~\"5..\"}[5m])",
                "legendFormat": "5xx Errors"
              },
              {
                "expr": "rate(http_requests_total{job=\"dgdm-api\",status=~\"4..\"}[5m])",
                "legendFormat": "4xx Errors"
              }
            ],
            "gridPos": {
              "h": 9,
              "w": 24,
              "x": 0,
              "y": 9
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GRAFANA_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring