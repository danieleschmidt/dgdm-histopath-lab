# DGDM Histopath Lab - Production Docker Image
# Generated by Terry for Terragon Labs SDLC v4.0
# Multi-stage build for optimized production deployment

FROM python:3.11-slim as builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY requirements.txt /tmp/
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Install additional production dependencies
RUN pip install --no-cache-dir \
    gunicorn[gevent] \
    prometheus-client \
    structlog \
    redis \
    psycopg2-binary \
    celery[redis] \
    flower

# Production stage
FROM python:3.11-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user
RUN groupadd -r dgdm && useradd -r -g dgdm -u 1000 dgdm

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=dgdm:dgdm . /app/

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/models /app/tmp && \
    chown -R dgdm:dgdm /app

# Install application in development mode
RUN pip install -e .

# Security hardening
RUN chmod -R 755 /app && \
    chmod -R 644 /app/dgdm_histopath && \
    find /app -name "*.py" -exec chmod 644 {} \; && \
    chmod +x /app/deployment/entrypoint.sh

# Health check
COPY deployment/healthcheck.py /app/healthcheck.py
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD python /app/healthcheck.py

# Switch to non-root user
USER dgdm

# Expose ports
EXPOSE 8000 8080 9090

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    ENVIRONMENT=production \
    LOG_LEVEL=INFO

# Entry point
ENTRYPOINT ["/app/deployment/entrypoint.sh"]
CMD ["api"]

# Worker image variant
FROM production as worker

# Install additional worker dependencies
USER root
RUN pip install --no-cache-dir \
    torch torchvision torchaudio \
    torch-geometric \
    dgl \
    transformers

USER dgdm

# Worker-specific configuration
ENV WORKER_TYPE=quantum_processor \
    MAX_CONCURRENT_TASKS=8 \
    CUDA_VISIBLE_DEVICES=0

CMD ["worker"]

# Scheduler image variant  
FROM production as scheduler

USER dgdm

ENV SCHEDULER_TYPE=quantum_scheduler \
    MAX_JOBS=100

CMD ["scheduler"]